#version 330 core
out vec4 FragColor;

struct Light {
    vec3 position;  
    vec3 color;

    vec3 direction;
    float cutOff;
	
    float constant;
    float linear;
    float quadratic;
};

in vec3 Normal;  
in vec3 FragPos;  
  
uniform vec3 viewPos; 
uniform vec3 objectColor;

uniform Light light;

void main()
{
    vec3 lightDir = normalize(light.position - FragPos);
    float theta = dot(lightDir, normalize(-light.direction));

    if(theta > light.cutOff)
    {
        // ambient
        float ambientStrength = 0.1;
        vec3 ambient = ambientStrength * light.color;
  	
        // diffuse 
        vec3 norm = normalize(Normal);
        
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * light.color;
   
    
        // specular
        float specularStrength = 0.5;
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);  
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 256);
        vec3 specular = specularStrength * spec * light.color;  

         // attenuation
        float distance    = length(light.position - FragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
        ambient  *= attenuation; 
        diffuse   *= attenuation;
        specular *= attenuation; 
        
        vec3 result = (ambient + diffuse + specular) * objectColor;
        FragColor = vec4(result, 1.0);
    }
    else
    {
     // ambient
        float ambientStrength = 0.1;
        vec3 ambient = ambientStrength * light.color;
        vec3 result = (ambient ) * objectColor;
        FragColor = vec4(result, 1.0);
    }
    
   
} 